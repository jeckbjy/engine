#pragma once
#include "Cute/Foundation.h"

CUTE_NS_BEGIN

#ifdef _WIN32
#define CUTE_ERROR(ec) WSA ## ec
#define CUTE_ERROR_OR(e_win, e_posix) e_win
#else
#define CUTE_ERROR(ec) ec
#define CUTE_ERROR_OR(e_win, e_posix) e_posix
#endif

enum ErrorCode
{
	ERR_SUCCESSED			= 0,
	ERR_ALREADY_OPEN		= 1,
	ERR_EOF					= 2,	// 连接正常关闭
	ERR_ACCESS				= CUTE_ERROR(EACCES),
	ERR_AFNOSUPPORT			= CUTE_ERROR(EAFNOSUPPORT),
	ERR_ADDRESS_IN_USE		= CUTE_ERROR(EADDRINUSE),
	ERR_ALREADY_CONNECTED	= CUTE_ERROR(EISCONN),
	ERR_ALREADY_STARTED		= CUTE_ERROR(EALREADY),
	ERR_CONNECTION_ABORTED	= CUTE_ERROR(ECONNABORTED),
	ERR_CONNECTION_REFUSED	= CUTE_ERROR(ECONNREFUSED),
	ERR_CONNECTION_RESET	= CUTE_ERROR(ECONNRESET),
	ERR_BAD_DESCRIPTOR		= CUTE_ERROR(EBADF),
	ERR_FAULT				= CUTE_ERROR(EFAULT),
	ERR_HOST_UNREACHABLE	= CUTE_ERROR(EHOSTUNREACH),
	ERR_IN_PROGRESS			= CUTE_ERROR(EINPROGRESS),
	ERR_INTERRUPTED			= CUTE_ERROR(EINTR),
	ERR_INVALID_ARGUMENT	= CUTE_ERROR(EINVAL),
	ERR_NAME_TOO_LONG		= CUTE_ERROR(ENAMETOOLONG),
	ERR_NETWORK_DOWN		= CUTE_ERROR(ENETDOWN),
	ERR_NETWORK_RESET		= CUTE_ERROR(ENETRESET),
	ERR_NETWORK_UNREACHABLE = CUTE_ERROR(ENETUNREACH),
	ERR_NO_DESCRIPTORS		= CUTE_ERROR(EMFILE),
	ERR_NO_BUFFER_SPACE		= CUTE_ERROR(ENOBUFS),
	ERR_NO_PROTOCOL_OPTION	= CUTE_ERROR(ENOPROTOOPT),
	ERR_NOT_CONNECTED		= CUTE_ERROR(ENOTCONN),
	ERR_NOT_SOCKET			= CUTE_ERROR(ENOTSOCK),
	ERR_EOPNOTSUPP			= CUTE_ERROR(EOPNOTSUPP),
	ERR_SHUT_DOWN			= CUTE_ERROR(ESHUTDOWN),
	ERR_TIMED_OUT			= CUTE_ERROR(ETIMEDOUT),
	ERR_WOULD_BLOCK			= CUTE_ERROR(EWOULDBLOCK),
	ERR_MSGSIZE				= CUTE_ERROR(EMSGSIZE),

	ERR_BROKEN_PIPE			= CUTE_ERROR_OR(ERROR_BROKEN_PIPE, EPIPE),
	ERR_NO_MEMORY			= CUTE_ERROR_OR(ERROR_OUTOFMEMORY, ENOMEM),
	ERR_NO_PERMISSION		= CUTE_ERROR_OR(ERROR_ACCESS_DENIED, EPERM),
	ERR_OPERATION_ABORTED	= CUTE_ERROR_OR(ERROR_OPERATION_ABORTED, ECANCELED),
	ERR_RETRY_AGAIN			= CUTE_ERROR_OR(ERROR_RETRY, EAGAIN),
};

class CUTE_CORE_API Error
{
public:
	static error_t	last();
	static bool		isLast(error_t ec);
	static String	getMessage(error_t ec);
	static String	getMessage();
	static void		emit(const String& info);
	static void		emit(error_t ec, const String& info);
};

CUTE_NS_END
