//! Render
#pragma once
#include "Cute/Foundation.h"

CUTE_NS_BEGIN

enum INDIRECT_ARGUMENT_TYPE
{
    INDIRECT_ARGUMENT_TYPE_DRAW			= 0,
    INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1,
    INDIRECT_ARGUMENT_TYPE_DISPATCH		= 2,
};

enum RESOURCE_KIND
{
    RESOURCE_KIND_BUFFER	= 0,
    RESOURCE_KIND_TEXTURE	= 1,
};

enum RESOURCE_DIMENSION
{
    RESOURCE_DIMENSION_UNKNOWN	 = 0,
    RESOURCE_DIMENSION_BUFFER	 = 1,
    RESOURCE_DIMENSION_TEXTURE1D = 2,
    RESOURCE_DIMENSION_TEXTURE2D = 3,
    RESOURCE_DIMENSION_TEXTURE3D = 4,
    RESOURCE_DIMENSION_CUBEMAP	 = 5,
};

enum VIEW_DIMENSION
{
    VIEW_DIMENSION_BUFFER			= 0,
    VIEW_DIMENSION_TEXTURE1D		= 1,
    VIEW_DIMENSION_TEXTURE1D_ARRAY	= 2,
    VIEW_DIMENSION_TEXTURE2D		= 3,
    VIEW_DIMENSION_TEXTURE2D_ARRAY	= 4,
    VIEW_DIMENSION_CUBEMAP			= 5,
    VIEW_DIMENSION_CUBEMAP_ARRAY	= 6,
    VIEW_DIMENSION_TEXTURE3D		= 7,
};

enum RESOURCE_LAYOUT
{
    RESOURCE_LAYOUT_LINEAR,
    RESOURCE_LAYOUT_OPTIMAL,
};

enum RESOURCE_MAP
{
    RESOURCE_MAP_READ_ONLY,
    RESOURCE_MAP_WRITE_ONLY,
    RESOURCE_MAP_READ_WRITE,
    RESOURCE_MAP_WRITE_DISCARD,
    RESOURCE_MAP_WRITE_ON_OVERWRITE,
};

enum RESOURCE_USAGE
{
    RESOURCE_USAGE_COLOR_TARGET		= 0x001,
    RESOURCE_USAGE_DEPTH_TARGET		= 0x002,
    RESOURCE_USAGE_UNORDERD_ACCESS	= 0x004,
    RESOURCE_USAGE_INDEX_BUFFER		= 0x008,
    RESOURCE_USAGE_VERTEX_BUFFER	= 0x010,
    RESOURCE_USAGE_CONSTANT_BUFFER	= 0x020,
    RESOURCE_USAGE_INDIRECT_BUFFER	= 0x040,
    RESOURCE_USAGE_SHADER_RESOURCE	= 0x080,
    RESOURCE_USAGE_COPY_SRC			= 0x100,
    RESOURCE_USAGE_COPY_DST			= 0x200,
    RESOURCE_USAGE_QUERY_BUFFER		= 0x300,
    RESOURCE_USAGE_DYNAMIC          = 0x400,
};

enum RESOURCE_STATE
{
    RESOURCE_STATE_UNKNOWN              = 0,
    RESOURCE_STATE_GENERAL              = 1,
    RESOURCE_STATE_VERTEX_BUFFER        = 2,
    RESOURCE_STATE_INDEX_BUFFER         = 3,
    RESOURCE_STATE_CONSTANT_BUFFER      = 4,
    RESOURCE_STATE_COLOR_WRITE          = 5,
    RESOURCE_STATE_COLOR_READ           = 6,
    RESOURCE_STATE_UNORDERED_ACCESS     = 7,
    RESOURCE_STATE_DEPTH_WRITE          = 8,
    RESOURCE_STATE_DEPTH_READ           = 9,
    RESOURCE_STATE_SHADER_READ          = 10,
    RESOURCE_STATE_STREAM_OUT           = 11,
    RESOURCE_STATE_INDIRECT_ARGUMENT    = 12,
    RESOURCE_STATE_COPY_DST             = 13,
    RESOURCE_STATE_COPY_SRC             = 14,
    RESOURCE_STATE_RESOLVE_DST          = 15,
    RESOURCE_STATE_RESOLVE_SRC          = 16,
    RESOURCE_STATE_PRESENT              = 17,
    RESOURCE_STATE_PREDICATION          = 18,
};

enum RESOURCE_FORMAT
{
    RESOURCE_FORMAT_UNKNOWN                 = 0,
    RESOURCE_FORMAT_R32G32B32A32_FLOAT      = 1,
    RESOURCE_FORMAT_R32G32B32A32_UINT       = 2,
    RESOURCE_FORMAT_R32G32B32A32_SINT       = 3,
    RESOURCE_FORMAT_R16G16B16A16_FLOAT      = 4,
    RESOURCE_FORMAT_R16G16B16A16_UINT       = 5,
    RESOURCE_FORMAT_R16G16B16A16_SINT       = 6,
    RESOURCE_FORMAT_R32G32B32_FLOAT         = 7,
    RESOURCE_FORMAT_R32G32B32_UINT          = 8,
    RESOURCE_FORMAT_R32G32B32_SINT          = 9,
    RESOURCE_FORMAT_R32G32_FLOAT            = 10,
    RESOURCE_FORMAT_R32G32_UINT             = 11,
    RESOURCE_FORMAT_R32G32_SINT             = 12,
    RESOURCE_FORMAT_R16G16_FLOAT            = 13,
    RESOURCE_FORMAT_R16G16_UINT             = 14,
    RESOURCE_FORMAT_R16G16_SINT             = 15,
    RESOURCE_FORMAT_R32_FLOAT               = 16,
    RESOURCE_FORMAT_R32_UINT                = 17,
    RESOURCE_FORMAT_R32_SINT                = 18,
    RESOURCE_FORMAT_R16_FLOAT               = 19,
    RESOURCE_FORMAT_R16_UINT                = 20,
    RESOURCE_FORMAT_R16_SINT                = 21,
    RESOURCE_FORMAT_R8G8B8A8_UNORM_SRGB     = 22,
    RESOURCE_FORMAT_R8G8B8A8_UNORM          = 23,
    RESOURCE_FORMAT_B8G8R8A8_UNORM_SRGB     = 24,
    RESOURCE_FORMAT_B8G8R8A8_UNORM          = 25,
    RESOURCE_FORMAT_R8G8_UNORM              = 26,
    RESOURCE_FORMAT_R8_UNORM                = 27,
    RESOURCE_FORMAT_R10G10B10A2_UNORM       = 28,
    RESOURCE_FORMAT_R10G10B10A2_UINT        = 29,
    RESOURCE_FORMAT_R11G11B10_FLOAT         = 30,
    RESOURCE_FORMAT_D32_FLOAT               = 31,
    RESOURCE_FORMAT_D24_UNORM_S8_UINT       = 32,
    RESOURCE_FORMAT_D16_UNORM               = 33,
    RESOURCE_FORMAT_BC1_UNORM_SRGB          = 34,
    RESOURCE_FORMAT_BC1_UNORM               = 35,
    RESOURCE_FORMAT_BC2_UNORM_SRGB          = 36,
    RESOURCE_FORMAT_BC2_UNORM               = 37,
    RESOURCE_FORMAT_BC3_UNORM_SRGB          = 38,
    RESOURCE_FORMAT_BC3_UNORM               = 39,
    RESOURCE_FORMAT_BC4_UNORM               = 40,
    RESOURCE_FORMAT_BC4_SNORM               = 41,
    RESOURCE_FORMAT_BC5_UNORM               = 42,
    RESOURCE_FORMAT_BC5_SNORM               = 43,
    RESOURCE_FORMAT_BC6H_UF16               = 44,
    RESOURCE_FORMAT_BC6H_SF16               = 45,
    RESOURCE_FORMAT_BC7_UNORM_SRGB          = 46,
    RESOURCE_FORMAT_BC7_UNORM               = 47,
    RESOURCE_FORMAT_ASTC_4X4_UNORM_SRGB     = 48,
    RESOURCE_FORMAT_ASTC_4X4_UNORM          = 49,
    RESOURCE_FORMAT_ASTC_5X4_UNORM_SRGB     = 50,
    RESOURCE_FORMAT_ASTC_5X4_UNORM          = 51,
    RESOURCE_FORMAT_ASTC_5X5_UNORM_SRGB     = 52,
    RESOURCE_FORMAT_ASTC_5X5_UNORM          = 53,
    RESOURCE_FORMAT_ASTC_6X5_UNORM_SRGB     = 54,
    RESOURCE_FORMAT_ASTC_6X5_UNORM          = 55,
    RESOURCE_FORMAT_ASTC_6X6_UNORM_SRGB     = 56,
    RESOURCE_FORMAT_ASTC_6X6_UNORM          = 57,
    RESOURCE_FORMAT_ASTC_8X5_UNORM_SRGB     = 58,
    RESOURCE_FORMAT_ASTC_8X5_UNORM          = 59,
    RESOURCE_FORMAT_ASTC_8X6_UNORM_SRGB     = 60,
    RESOURCE_FORMAT_ASTC_8X6_UNORM          = 61,
    RESOURCE_FORMAT_ASTC_8X8_UNORM_SRGB     = 62,
    RESOURCE_FORMAT_ASTC_8X8_UNORM          = 63,
    RESOURCE_FORMAT_ASTC_10X5_UNORM_SRGB    = 64,
    RESOURCE_FORMAT_ASTC_10X5_UNORM         = 65,
    RESOURCE_FORMAT_ASTC_10X6_UNORM_SRGB    = 66,
    RESOURCE_FORMAT_ASTC_10X6_UNORM         = 67,
    RESOURCE_FORMAT_ASTC_10X8_UNORM_SRGB    = 68,
    RESOURCE_FORMAT_ASTC_10X8_UNORM         = 69,
    RESOURCE_FORMAT_ASTC_10X10_UNORM_SRGB   = 70,
    RESOURCE_FORMAT_ASTC_10X10_UNORM        = 71,
    RESOURCE_FORMAT_ASTC_12X10_UNORM_SRGB   = 72,
    RESOURCE_FORMAT_ASTC_12X10_UNORM        = 73,
    RESOURCE_FORMAT_ASTC_12X12_UNORM_SRGB   = 74,
    RESOURCE_FORMAT_ASTC_12X12_UNORM        = 75,
    RESOURCE_FORMAT_ETC1_RGB8               = 76,
    RESOURCE_FORMAT_ETC2_RGB8               = 77,
    RESOURCE_FORMAT_ETC2_RGBA8              = 78,
    RESOURCE_FORMAT_ETC2_RGB8A1             = 79,
    RESOURCE_FORMAT_ATC_RGB                 = 80,	// ATC (AMD_compressed_ATC_texture)
    RESOURCE_FORMAT_ATC_RGBA_EXPLICIT_ALPHA = 81,
    RESOURCE_FORMAT_ATC_RGBA_INTERPOLATED_ALPHA = 82,
    RESOURCE_FORMAT_PVRTC_RGB2              = 83,
    RESOURCE_FORMAT_PVRTC_RGBA2             = 84,
    RESOURCE_FORMAT_PVRTC_RGB4              = 85,
    RESOURCE_FORMAT_PVRTC_RGBA4             = 86,
    RESOURCE_FORMAT_PVRTC_2BPP              = 87,
    RESOURCE_FORMAT_PVRTC_4BPP              = 88,
    RESOURCE_FORMAT_MAX,
};

enum TEXTURE_SWIZZLE
{
    TEXTURE_SWIZZLE_R       = 0,
    TEXTURE_SWIZZLE_G       = 1,
    TEXTURE_SWIZZLE_B       = 2,
    TEXTURE_SWIZZLE_A       = 3,
    TEXTURE_SWIZZLE_ZERO    = 4,
    TEXTURE_SWIZZLE_ONE     = 5,
};

enum HEAP_TYPE
{
    HEAP_TYPE_DEFAULT   = 0,
    HEAP_TYPE_UPLOAD    = 1,
    HEAP_TYPE_READBACK  = 2,
};

enum CPU_PAGE_PROPERTY
{
    CPU_PAGE_PROPERTY_DEFAULT       = 0,
    CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    CPU_PAGE_PROPERTY_WRITE_BACK    = 3,
};

enum COMMANDLIST_TYPE
{
    COMMANDLIST_TYPE_DIRECT     = 0,
    COMMANDLIST_TYPE_BUNDLE     = 1,
    COMMANDLIST_TYPE_COMPUTE	= 2,
    COMMANDLIST_TYPE_COPY       = 3,
};

enum PRIMITIVE_TOPOLOGY
{
    PRIMITIVE_TOPOLOGY_POINTLIST            = 0,
    PRIMITIVE_TOPOLOGY_LINELIST             = 1,
    PRIMITIVE_TOPOLOGY_LINESTRIP            = 2,
    PRIMITIVE_TOPOLOGY_TRIANGLELIST         = 3,
    PRIMITVIE_TOPOLOGY_TRIANGLESTRIP        = 4,
    PRIMITIVE_TOPOLOGY_LINELIST_ADJ         = 5,
    PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ        = 6,
    PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ     = 7,
    PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ    = 8,
    PRIMITIVE_TOPOLOGY_PATCHLIST            = 9,
};

enum SHADER_MASK
{
    SHADER_MASK_VERTEX   = 0x1,
    SHADER_MASK_DOMAIN   = 0x2,
    SHADER_MASK_HULL     = 0x4,
    SHADER_MASK_GEOMETRY = 0x8,
    SHADER_MASK_PIXEL    = 0x10,
    SHADER_MASK_COMPUTE  = 0x20,
};

enum DESCRIPTOR_TYPE
{
    DESCRIPTOR_TYPE_CBV = 0,
    DESCRIPTOR_TYPE_SRV = 1,
    DESCRIPTOR_TYPE_UAV = 2,
    DESCRIPTOR_TYPE_SMP = 3,
    DESCRIPTOR_TYPE_RTV = 4,
    DESCRIPTOR_TYPE_DSV = 5,
};

enum POLYGON_MODE
{
    POLYGON_MODE_SOLID      = 0,
    POLYGON_MODE_WIREFRAME  = 1,
};

typedef POLYGON_MODE FILL_MODE;

enum CULL_MODE
{
    CULL_MODE_NONE  = 0,
    CULL_MODE_FRONT = 1,
    CULL_MODE_BACK  = 2,
};

enum COMPARE_OP
{
    COMPARE_OP_NEVER    = 0,
    COMPARE_OP_LESS     = 1,
    COMPARE_OP_EQUAL    = 2,
    COMPARE_OP_LEQUAL   = 3,
    COMPARE_OP_GREATER  = 4,
    COMPARE_OP_GEQUAL   = 5,
    COMPARE_OP_ALWAYS   = 6,
};

enum STENCIL_OP
{
    STENCIL_OP_KEEP     = 0,
    STENCIL_OP_ZERO     = 1,
    STENCIL_OP_REPLACE  = 2,
    STENCIL_OP_INCR_SAT = 3,
    STENCIL_OP_DECR_SAT = 4,
    STENCIL_OP_INVERT   = 5,
    STENCIL_OP_INCR     = 6,
    STENCIL_OP_DECR     = 7,
};

enum BLEND_FACTOR
{
    BLEND_FACTOR_ZERO           = 0,
    BLEND_FACTOR_ONE            = 1,
    BLEND_FACTOR_SRC_COLOR      = 2,
    BLEND_FACTOR_INV_SRC_COLOR  = 3,
    BLEND_FACTOR_SRC_ALPHA      = 4,
    BLEND_FACTOR_INV_SRC_ALPHA  = 5,
    BLEND_FACTOR_DST_ALPHA      = 6,
    BLEND_FACTOR_INV_DST_ALPHA  = 7,
    BLEND_FACTOR_DST_COLOR      = 8,
    BLEND_FACTOR_INV_DST_COLOR  = 9,
    BLEND_FACTOR_SRC_ALPHA_SAT  = 10,
    BLEND_FACTOR_SRC1_COLOR     = 11,
    BLEND_FACTOR_INV_SRC1_COLOR = 12,
    BLEND_FACTOR_SRC1_ALPHA     = 13,
    BLEND_FACTOR_INV_SRC1_ALPHA = 14,
};

enum BLEND_OP
{
    BLEND_OP_ADD        = 0,
    BLEND_OP_SUB        = 1,
    BLEND_OP_REV_SUB    = 2,
    BLEND_OP_MIN        = 3,
    BLEND_OP_MAX        = 4,
};

enum LOGIC_OP
{
    LOGIC_OP_CLEAR      = 0,
    LOGIC_OP_SET        = 1,
    LOGIC_OP_COPY       = 2,
    LOGIC_OP_COPY_INV   = 3,
    LOGIC_OP_NOOP       = 4,
    LOGIC_OP_INV        = 5,
    LOGIC_OP_AND        = 6,
    LOGIC_OP_NAND       = 7,
    LOGIC_OP_OR         = 8,
    LOGIC_OP_NOR        = 9,
    LOGIC_OP_XOR        = 10,
    LOGIC_OP_EQUIV      = 11,
    LOGIC_OP_AND_REV    = 12,
    LOGIC_OP_AND_INV    = 13,
    LOGIC_OP_OR_REV     = 14,
    LOGIC_OP_OR_INV     = 15,
};

enum FILTER_MODE
{
    FILTER_MODE_NEAREST = 0,
    FILTER_MODE_LINEAR  = 1,
};

enum MIPMAP_MODE
{
    MIPMAP_MODE_NEAREST = 0,
    MIPMAP_MODE_LINEAR  = 1,
    MIPMAP_MODE_NONE    = 2,
};

enum TEXTURE_ADDRESS_MODE
{
    TEXTURE_ADDRESS_MODE_REPEAT         = 0,
    TEXTURE_ADDRESS_MODE_MIRROR         = 1,
    TEXTURE_ADDRESS_MODE_CLAMP          = 2,
    TEXTURE_ADDRESS_MODE_BORDER         = 3,
    TEXTURE_ADDRESS_MODE_MIRROR_ONCE    = 4,
};

enum BORDER_COLOR
{
    BORDER_COLOR_TRANSPARENT_BLACK  = 0,    //!< (0, 0, 0, 0)
    BORDER_COLOR_OPAQUE_BLACK       = 1,    //!< (0, 0, 0, 1)
    BORDER_COLOR_OPAQUE_WHITE       = 2,    //!< (1, 1, 1, 1)
};

enum QUERY_TYPE
{
    QUERY_TYPE_OCCLUSION            = 0,
    QUERY_TYPE_TIMESTAMP            = 1,
    QUERY_TYPE_PIPELINE_STATISTICS  = 2,
};

enum INPUT_CLASSIFICATION
{
    INPUT_CLASSIFICATION_PER_VERTEX   = 0,
    INPUT_CLASSIFICATION_PER_INSTANCE = 1
};

enum TEXTURE_ASPECT
{
    TEXTURE_ASPECT_COLOR    = 0,
    TEXTURE_ASPECT_DEPTH    = 1,
    TEXTURE_ASPECT_STENCIL  = 2,
};

enum META_DATA_TYPE
{
    META_DATA_NONE          = 0,
    META_DATA_HDR10         = 1,
};

enum COLOR_SPACE_TYPE
{
    COLOR_SPACE_UNKNOWN = 0,        //!<
    COLOR_SPACE_SRGB,               //!< ColorSpace:RGB,   Range:0-255, Gamma:2.2,  Primaries:BT.709
    COLOR_SPACE_SCRGB,              //!< ColorSpace:RGB,   Range:0-255, Gamma:1.0,  Primaries:BT.709
    COLOR_SPACE_RGB_BT2020,         //!< ColorSpace:RGB,   Range:0-255, Gamma:2.2,  Primaries:BT.2020
    COLOR_SPACE_RGB_BT2020_PQ,      //!< ColorSpace:RGB,   Range:0-255, Gamma:2084, Primaries:BT.2020
};

CUTE_NS_END
