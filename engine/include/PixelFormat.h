#pragma once
#include "API.h"

CU_NS_BEGIN

//enum PixelFormat1
//{
//	PF_UNDEFINED = 0,
//
//	PF_R4G4_UNORM_PACK8 = 1,
//	PF_R4G4B4A4_UNORM_PACK16 = 2,
//	PF_B4G4R4A4_UNORM_PACK16 = 3,
//	PF_R5G6B5_UNORM_PACK16 = 4,
//	PF_B5G6R5_UNORM_PACK16 = 5,
//	PF_R5G5B5A1_UNORM_PACK16 = 6,
//	PF_B5G5R5A1_UNORM_PACK16 = 7,
//	PF_A1R5G5B5_UNORM_PACK16 = 8,
//
//	PF_R8_UNORM = 9,
//	PF_R8_SNORM = 10,
//	PF_R8_USCALED = 11,
//	PF_R8_SSCALED = 12,
//	PF_R8_UINT = 13,
//	PF_R8_SINT = 14,
//	PF_R8_SRGB = 15,
//
//	PF_R8G8_UNORM = 16,
//	PF_R8G8_SNORM = 17,
//	PF_R8G8_USCALED = 18,
//	PF_R8G8_SSCALED = 19,
//	PF_R8G8_UINT = 20,
//	PF_R8G8_SINT = 21,
//	PF_R8G8_SRGB = 22,
//
//	PF_R8G8B8_UNORM = 23,
//	PF_R8G8B8_SNORM = 24,
//	PF_R8G8B8_USCALED = 25,
//	PF_R8G8B8_SSCALED = 26,
//	PF_R8G8B8_UINT = 27,
//	PF_R8G8B8_SINT = 28,
//	PF_R8G8B8_SRGB = 29,
//
//	PF_B8G8R8_UNORM = 30,
//	PF_B8G8R8_SNORM = 31,
//	PF_B8G8R8_USCALED = 32,
//	PF_B8G8R8_SSCALED = 33,
//	PF_B8G8R8_UINT = 34,
//	PF_B8G8R8_SINT = 35,
//	PF_B8G8R8_SRGB = 36,
//
//	PF_R8G8B8A8_UNORM = 37,
//	PF_R8G8B8A8_SNORM = 38,
//	PF_R8G8B8A8_USCALED = 39,
//	PF_R8G8B8A8_SSCALED = 40,
//	PF_R8G8B8A8_UINT = 41,
//	PF_R8G8B8A8_SINT = 42,
//	PF_R8G8B8A8_SRGB = 43,
//
//	PF_B8G8R8A8_UNORM = 44,
//	PF_B8G8R8A8_SNORM = 45,
//	PF_B8G8R8A8_USCALED = 46,
//	PF_B8G8R8A8_SSCALED = 47,
//	PF_B8G8R8A8_UINT = 48,
//	PF_B8G8R8A8_SINT = 49,
//	PF_B8G8R8A8_SRGB = 50,
//
//	PF_A8B8G8R8_UNORM_PACK32 = 51,
//	PF_A8B8G8R8_SNORM_PACK32 = 52,
//	PF_A8B8G8R8_USCALED_PACK32 = 53,
//	PF_A8B8G8R8_SSCALED_PACK32 = 54,
//	PF_A8B8G8R8_UINT_PACK32 = 55,
//	PF_A8B8G8R8_SINT_PACK32 = 56,
//	PF_A8B8G8R8_SRGB_PACK32 = 57,
//
//	PF_A2R10G10B10_UNORM_PACK32 = 58,
//	PF_A2R10G10B10_SNORM_PACK32 = 59,
//	PF_A2R10G10B10_USCALED_PACK32 = 60,
//	PF_A2R10G10B10_SSCALED_PACK32 = 61,
//	PF_A2R10G10B10_UINT_PACK32 = 62,
//	PF_A2R10G10B10_SINT_PACK32 = 63,
//	PF_A2B10G10R10_UNORM_PACK32 = 64,
//	PF_A2B10G10R10_SNORM_PACK32 = 65,
//	PF_A2B10G10R10_USCALED_PACK32 = 66,
//	PF_A2B10G10R10_SSCALED_PACK32 = 67,
//	PF_A2B10G10R10_UINT_PACK32 = 68,
//	PF_A2B10G10R10_SINT_PACK32 = 69,
//
//	PF_R16_UNORM = 70,
//	PF_R16_SNORM = 71,
//	PF_R16_USCALED = 72,
//	PF_R16_SSCALED = 73,
//	PF_R16_UINT = 74,
//	PF_R16_SINT = 75,
//	PF_R16_SFLOAT = 76,
//
//	PF_R16G16_UNORM = 77,
//	PF_R16G16_SNORM = 78,
//	PF_R16G16_USCALED = 79,
//	PF_R16G16_SSCALED = 80,
//	PF_R16G16_UINT = 81,
//	PF_R16G16_SINT = 82,
//	PF_R16G16_SFLOAT = 83,
//
//	PF_R16G16B16_UNORM = 84,
//	PF_R16G16B16_SNORM = 85,
//	PF_R16G16B16_USCALED = 86,
//	PF_R16G16B16_SSCALED = 87,
//	PF_R16G16B16_UINT = 88,
//	PF_R16G16B16_SINT = 89,
//	PF_R16G16B16_SFLOAT = 90,
//
//	PF_R16G16B16A16_UNORM = 91,
//	PF_R16G16B16A16_SNORM = 92,
//	PF_R16G16B16A16_USCALED = 93,
//	PF_R16G16B16A16_SSCALED = 94,
//	PF_R16G16B16A16_UINT = 95,
//	PF_R16G16B16A16_SINT = 96,
//	PF_R16G16B16A16_SFLOAT = 97,
//
//	PF_R32_UINT = 98,
//	PF_R32_SINT = 99,
//	PF_R32_SFLOAT = 100,
//
//	PF_R32G32_UINT = 101,
//	PF_R32G32_SINT = 102,
//	PF_R32G32_SFLOAT = 103,
//
//	PF_R32G32B32_UINT = 104,
//	PF_R32G32B32_SINT = 105,
//	PF_R32G32B32_SFLOAT = 106,
//
//	PF_R32G32B32A32_UINT = 107,
//	PF_R32G32B32A32_SINT = 108,
//	PF_R32G32B32A32_SFLOAT = 109,
//
//	PF_R64_UINT = 110,
//	PF_R64_SINT = 111,
//	PF_R64_SFLOAT = 112,
//
//	PF_R64G64_UINT = 113,
//	PF_R64G64_SINT = 114,
//	PF_R64G64_SFLOAT = 115,
//
//	PF_R64G64B64_UINT = 116,
//	PF_R64G64B64_SINT = 117,
//	PF_R64G64B64_SFLOAT = 118,
//
//	PF_R64G64B64A64_UINT = 119,
//	PF_R64G64B64A64_SINT = 120,
//	PF_R64G64B64A64_SFLOAT = 121,
//
//	PF_B10G11R11_UFLOAT_PACK32 = 122,
//	PF_E5B9G9R9_UFLOAT_PACK32 = 123,
//
//	PF_D16_UNORM = 124,
//	PF_X8_D24_UNORM_PACK32 = 125,
//	PF_D32_SFLOAT = 126,
//	PF_S8_UINT = 127,
//	PF_D16_UNORM_S8_UINT = 128,
//	PF_D24_UNORM_S8_UINT = 129,
//	PF_D32_SFLOAT_S8_UINT = 130,
//
//	PF_BC1_RGB_UNORM_BLOCK = 131,
//	PF_BC1_RGB_SRGB_BLOCK = 132,
//	PF_BC1_RGBA_UNORM_BLOCK = 133,
//	PF_BC1_RGBA_SRGB_BLOCK = 134,
//	PF_BC2_UNORM_BLOCK = 135,
//	PF_BC2_SRGB_BLOCK = 136,
//	PF_BC3_UNORM_BLOCK = 137,
//	PF_BC3_SRGB_BLOCK = 138,
//	PF_BC4_UNORM_BLOCK = 139,
//	PF_BC4_SNORM_BLOCK = 140,
//	PF_BC5_UNORM_BLOCK = 141,
//	PF_BC5_SNORM_BLOCK = 142,
//	PF_BC6H_UFLOAT_BLOCK = 143,
//	PF_BC6H_SFLOAT_BLOCK = 144,
//	PF_BC7_UNORM_BLOCK = 145,
//	PF_BC7_SRGB_BLOCK = 146,
//
//	PF_ETC2_R8G8B8_UNORM_BLOCK = 147,
//	PF_ETC2_R8G8B8_SRGB_BLOCK = 148,
//	PF_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
//	PF_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
//	PF_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
//	PF_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
//
//	PF_EAC_R11_UNORM_BLOCK = 153,
//	PF_EAC_R11_SNORM_BLOCK = 154,
//	PF_EAC_R11G11_UNORM_BLOCK = 155,
//	PF_EAC_R11G11_SNORM_BLOCK = 156,
//
//	PF_ASTC_4x4_UNORM_BLOCK = 157,
//	PF_ASTC_4x4_SRGB_BLOCK = 158,
//	PF_ASTC_5x4_UNORM_BLOCK = 159,
//	PF_ASTC_5x4_SRGB_BLOCK = 160,
//	PF_ASTC_5x5_UNORM_BLOCK = 161,
//	PF_ASTC_5x5_SRGB_BLOCK = 162,
//	PF_ASTC_6x5_UNORM_BLOCK = 163,
//	PF_ASTC_6x5_SRGB_BLOCK = 164,
//	PF_ASTC_6x6_UNORM_BLOCK = 165,
//	PF_ASTC_6x6_SRGB_BLOCK = 166,
//	PF_ASTC_8x5_UNORM_BLOCK = 167,
//	PF_ASTC_8x5_SRGB_BLOCK = 168,
//	PF_ASTC_8x6_UNORM_BLOCK = 169,
//	PF_ASTC_8x6_SRGB_BLOCK = 170,
//	PF_ASTC_8x8_UNORM_BLOCK = 171,
//	PF_ASTC_8x8_SRGB_BLOCK = 172,
//	PF_ASTC_10x5_UNORM_BLOCK = 173,
//	PF_ASTC_10x5_SRGB_BLOCK = 174,
//	PF_ASTC_10x6_UNORM_BLOCK = 175,
//	PF_ASTC_10x6_SRGB_BLOCK = 176,
//	PF_ASTC_10x8_UNORM_BLOCK = 177,
//	PF_ASTC_10x8_SRGB_BLOCK = 178,
//	PF_ASTC_10x10_UNORM_BLOCK = 179,
//	PF_ASTC_10x10_SRGB_BLOCK = 180,
//	PF_ASTC_12x10_UNORM_BLOCK = 181,
//	PF_ASTC_12x10_SRGB_BLOCK = 182,
//	PF_ASTC_12x12_UNORM_BLOCK = 183,
//	PF_ASTC_12x12_SRGB_BLOCK = 184,
//
//	PIEXL_FORMAT_COUNT,
//};

// http://blog.csdn.net/liminled/article/details/45149259
enum PixelFormat
{
	PF_UNKNOWN = 0,

	PF_UINT_R8,
	PF_UINT_RG8,
	PF_UINT_RGB8,
	PF_UINT_RGBA8,
	PF_UINT_R16,
	PF_UINT_RG16,
	PF_UINT_RGB16,
	PF_UINT_RGBA16,
	PF_UINT_R32,
	PF_UINT_RG32,
	PF_UINT_RGB32,
	PF_UINT_RGBA32,

	PF_SINT_R8,
	PF_SINT_RG8,
	PF_SINT_RGB8,
	PF_SINT_RGBA8,
	PF_SINT_R16,
	PF_SINT_RG16,
	PF_SINT_RGB16,
	PF_SINT_RGBA16,
	PF_SINT_R32,
	PF_SINT_RG32,
	PF_SINT_RGB32,
	PF_SINT_RGBA32,

	PF_SNORM_R8,
	PF_SNORM_RG8,
	PF_SNORM_RGB8,
	PF_SNORM_RGBA8,
	PF_SNORM_R16,
	PF_SNORM_RG16,
	PF_SNORM_RGB16,
	PF_SNORM_RGBA16,

	//PF_SNORM_R32,
	//PF_SNORM_RG32,
	//PF_SNORM_RGB32,
	//PF_SNORM_RGBA32,
	//PF_UNORM_R8,
	//PF_UNORM_RG8,
	//PF_UNORM_RGB8,
	//PF_UNORM_RGBA8,
	//PF_UNORM_R16,
	//PF_UNORM_RG16,
	//PF_UNORM_RGB16,
	//PF_UNORM_RGBA16,
	//PF_UNORM_R32,
	//PF_UNORM_RG32,
	//PF_UNORM_RGB32,
	//PF_UNORM_RGBA32,

	PF_FLOAT_R16,
	PF_FLOAT_GR16,
	PF_FLOAT_RGB16,
	PF_FLOAT_RGBA16,
	PF_FLOAT_R32,
	PF_FLOAT_GR32,
	PF_FLOAT_RGB32,
	PF_FLOAT_RGBA32,
	PF_FLOAT_R11G11B10,

	// unorm
	PF_R8G8B8,
	PF_B8G8R8,
	PF_R8G8B8A8,
	PF_B8G8R8A8,
	PF_A8R8G8B8,
	PF_A8B8G8R8,
	PF_X8R8G8B8,
	PF_X8B8G8R8,
	// srgb
	PF_R8G8B8_SRGB,
	PF_B8G8R8_SRGB,
	PF_R8G8B8A8_SRGB,
	PF_B8G8R8A8_SRGB,
	PF_A8R8G8B8_SRGB,
	PF_A8B8G8R8_SRGB,
	PF_X8R8G8B8_SRGB,
	PF_X8B8G8R8_SRGB,

	PF_D32_FLOAT_S8X24_UINT,
	PF_D24_UNORM_S8_UINT,
	PF_D32_FLOAT,
	PF_D16_UNORM,

	PF_L8,
	PF_L16,
	PF_A8,
	PF_A4L4,
	PF_R5G6B5,
	PF_B5G6R5,
	PF_R3G3B2,
	PF_A4R4G4B4,
	PF_A1R5G5B5,
	PF_A2R10G10B10,
	PF_A2B10G10R10,
	PF_R9G9B9E5,		//PF_R9G9B9E5_SHAREDEXP

	// dds, S3TC_DXT1, S3TC_DXT3, S3TC_DXT5
	PF_BC1_UNORM,
	PF_BC2_UNORM,
	PF_BC3_UNORM,
	PF_BC4_UNORM,
	PF_BC4_SNORM,
	PF_BC5_UNORM,
	PF_BC5_SNORM,
	PF_BC6H_UF16,
	PF_BC6H_SF16,
	PF_BC7_UNORM,

	PF_BC1_SRGB,
	PF_BC2_SRGB,
	PF_BC3_SRGB,
	PF_BC4_SRGB,
	PF_BC5_SRGB,
	PF_BC7_SRGB,

	// opengl es:etc1,etc2,eac,astc
	PF_ETC1_RGB8,
	PF_ETC2_RGB8,
	PF_ETC2_RGBA8,
	PF_ETC2_RGB8A1,
	PF_ATC_RGB,							// ATC (AMD_compressed_ATC_texture)
	PF_ATC_RGBA_EXPLICIT_ALPHA,
	PF_ATC_RGBA_INTERPOLATED_ALPHA,

	// PVRTC(PowerVR) RGB 2 bpp
	PF_PVRTC_RGB2,
	PF_PVRTC_RGBA2,
	PF_PVRTC_RGB4,
	PF_PVRTC_RGBA4,
	PF_PVRTC_2BPP,	// PVRTC (PowerVR) Version 2, 2 bpp
	PF_PVRTC_4BPP,

	PIXEL_FORMAT_MAX,
	PF_FLOAT1 = PF_FLOAT_R32,
	PF_FLOAT2 = PF_FLOAT_GR32,
	PF_FLOAT3 = PF_FLOAT_RGB32,
	PF_FLOAT4 = PF_FLOAT_RGBA32,
	PF_SBYTE1 = PF_SINT_R8,
	PF_SBYTE2 = PF_SINT_RG8,
	PF_SBYTE3 = PF_SINT_RGB8,
	PF_SBYTE4 = PF_SINT_RGBA8,
	PF_UBYTE1 = PF_UINT_R8,
	PF_UBYTE2 = PF_UINT_RG8,
	PF_UBYTE3 = PF_UINT_RGB8,
	PF_UBYTE4 = PF_UINT_RGBA8,
	PF_SHORT1 = PF_SINT_R16,
	PF_SHORT2 = PF_SINT_RG16,
	PF_SHORT3 = PF_SINT_RGB16,
	PF_SHORT4 = PF_SINT_RGBA16,
	PF_USHORT1 = PF_UINT_R16,
	PF_USHORT2 = PF_UINT_RG16,
	PF_USHORT3 = PF_UINT_RGB16,
	PF_USHORT4 = PF_UINT_RGBA16,
	PF_SINT1 = PF_SINT_R32,
	PF_SINT2 = PF_SINT_RG32,
	PF_SINT3 = PF_SINT_RGB32,
	PF_SINT4 = PF_SINT_RGBA32,
	PF_UINT1 = PF_UINT_R32,
	PF_UINT2 = PF_UINT_RG32,
	PF_UINT3 = PF_UINT_RGB32,
	PF_UINT4 = PF_UINT_RGBA32,
	// dxt1,2硬件相同，3,4硬件上相同
	PF_DXT1 = PF_BC1_UNORM,
	PF_DXT2 = PF_BC1_UNORM,
	PF_DXT3 = PF_BC2_UNORM,
	PF_DXT4 = PF_BC2_UNORM,
	PF_DXT5 = PF_BC3_UNORM,

#if CU_ENDIAN == CU_ENDIAN_BIG
	PF_BYTE_RGB = PF_R8G8B8,
	PF_BYTE_BGR = PF_B8G8R8,
	PF_BYTE_RGBA = PF_R8G8B8A8,
	PF_BYTE_BGRA = PF_B8G8R8A8,
#else
	PF_BYTE_RGB = PF_B8G8R8,
	PF_BYTE_BGR = PF_R8G8B8,
	PF_BYTE_RGBA = PF_B8G8R8A8,
	PF_BYTE_BGRA = PF_R8G8B8A8,
#endif
};

struct CU_API PixelUtil
{
	static uint getFormat(const String& format);
	static uint getBytes(PixelFormat fmt);			// 总共占有多少字节
	static uint getElementCount(PixelFormat fmt);	// 返回有多少个元素

	static uint getMemorySize(PixelFormat fmt, uint width, uint height, uint depth);
	static uint getImageSize(PixelFormat fmt, uint width, uint height, uint depth, uint mipmaps, uint faces);

	static bool hasFlags(PixelFormat fmt, uint32_t flags);
	static bool isCompressed(PixelFormat fmt);
	static bool isDepth(PixelFormat fmt);
	static bool isStencil(PixelFormat fmt);
	static bool isDepthStencil(PixelFormat fmt);
	static bool isAlpha(PixelFormat fmt);
	static bool isFloat(PixelFormat fmt);
	static bool isNormalized(PixelFormat fmt);
	static bool isLuminance(PixelFormat fmt);
};

struct PixelData
{
	uint32_t x;
	uint32_t y;
	uint32_t z;
	uint32_t width;
	uint32_t height;
	uint32_t depth;
	PixelFormat format;
	char* data;
	PixelData(){ memset(this, 0, sizeof(PixelData)); }
	PixelData(uint32_t width, uint32_t height, char* data)
		:x(0), y(0), z(0), width(width), height(height), data(data){}
};

CU_NS_END
